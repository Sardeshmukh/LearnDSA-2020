#include<bits/stdc++.h>
using namespace std;

//--------------------------------------------------------------------------------------------------------
// Part 1
//--------------------------------------------------------------------------------------------------------

//Address structure
struct Address {

};

//Person structure
struct Person{
string name;
int age;
Address address;

//constructor 1
Person(const string& name, int age)
:name(name),age(age){}

//Constructor 2
explicit Person(const Address& address):address(address)
{}
};

//Exchange structure
struct Exchange {
int value;
float rates[2];
};

//Main program
int main() {

  //1. Initialization Examples
  //-----------------------------
  int i{10};
  int n{}; //n is initialized to zero
  int* ptr{}; //ptr is initialized to nullptr
  string name{"Prasad"};
  vector<int> vec{10,20,30};
  map<string,string> Dict{{"k1","v1"},{"k2","v2"}};
  double *pd= new double [3] {0.5, 1.2, 12.99};
  Person p1{"Prasad",30};
  Person p2{Address()};
  Exchange e{1,2,3}; //e.value=1 , e.rates[0]=2, e.rates[1]=3
  Exchange e{10,20}; //e.value=10 , e.rates[0]=20, e.rates[1]=0

  //Q. What if I wanted to initialize only rates and not value?
  /*
  Answer: Create a constructor
  
  Exchange(Initializer_list<float> r)
  {
    if(r.size<2) return;
    auto ptr = r.begin();
    rates[0] = *ptr;
    ptr++;
    rates[1] = *ptr;
  }
  
  Example:
  Exchange e{10,20}; //e.value=0 or garbage, rates[0]=10, rates[1]=20
  */
}

//--------------------------------------------------------------------------------------------------------
// Part 2
//--------------------------------------------------------------------------------------------------------

//Below two codes are equivalent

class C
{
string s("abc");
double d=0;
char * p {nullptr};
int y[5] {1,2,3,4};
public:
C(){}
};

class C2
{
string s;
double d;
char * p;
int y[5];
public:
C() : s("abc"), d(0.0), p(nullptr), y{1,2,3,4} {}
};